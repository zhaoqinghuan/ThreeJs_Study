//  片元着色器的文件
//    varing 是WebGL定义的限定符（Qualifier），限定符用于数据类型（Type）之前，表明该变量的性质。
//    const：这是我们熟悉的常量的意思
//    attribute：从JavaScript代码传递到顶点着色器中，每个顶点对应不同的值
//    uniform：每个顶点/片元对应相同的值
//    varying：从顶点着色器传递到片元着色器中
//  如果不写限定符，那么默认是只有在当前文件中能访问。
//  所以，varying vec2 vUv;的意思是，声明了一个叫vUv的变量，它的类型为vec2，该变量是为了将顶点着色器中的信息传递到片元着色器中。
//    那么它传递了什么信息呢？我们看到与之相关的只有vUv = uv;实际上在模型生成的时候就已经自动对应好了 UV映射
//  将每个面片贴的图统一映射到一张纹理上，记录每个面片贴图在纹理上对应的位置。
//  而之所以称为u和v，指的就是在纹理映射后的新坐标系。我们也发现，uv变量的类型是vec2，顾名思义就是一个二维的向量，可以使用uv.x和uv.y分别访问到uv两个维度的值。

//  使用varying vec2 vUv;将uv信息传递到片元着色器是因为片元着色器本身不能访问到uv信息，如果需要得到这一值的话，就需要从顶点着色器中传递过去，我们将其命名为vUv。

//  那么，gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
//    又是在干什么呢？学过图形学的读者一定对投影矩阵、模型矩阵并不陌生，这里做的事情就是计算三维模型在二维显示屏上的坐标。
//    这里，我们看到position也没有预先定义过，不过通过上面的uv应该也能猜测到position也是Three.js为我们提供的一个方便。
//    position是顶点在物体坐标系（而不是世界坐标系）中的位置。这就意味着，一个正方体位于世界坐标系的(2, 0, 0)与位于(0, 0, 0)将不会改变任何顶点的position，这个position是相对于正方体的锚点而言的。

//  因此，这段顶点着色器的作用就是将uv信息传递到片元着色器中，并按默认的方式计算顶点位置。
varying vec2 vUv; 
void main() {
    gl_FragColor = vec4(vUv.x, vUv.y, 0.0, 1.0);
}